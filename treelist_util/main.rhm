#lang rhombus/static/and_meta

export:
  List

import:
  lib("treelist-util/main.rkt") open

def List.andmap: #{treelist-andmap}
def List.ormap: #{treelist-ormap}

def List.foldl: #{treelist-foldl}
def List.foldr: #{treelist-foldr}

fun List.filter(tl :: List,
                ~keep: keep = fun (_): #true,
                ~skip: skip = fun (_): #false) :: List:
  for List (el: tl):
    keep_when: keep(el)
    skip_when: skip(el)
    el

fun List.remf(tl :: List, pred) :: List:
  #{treelist-remf}(pred, tl)

fun List.remove_all(tl :: List, vs :: List) :: List:
  #{treelist-remove*}(vs, tl, (_ == _))

def List.is_empty: #{treelist-empty?}

fun List.update(tl :: List, pos :: NonnegInt, updater) :: List:
  #{treelist-update}(tl, pos, updater)

fun List.index_of(tl :: List, v) :: maybe(NonnegInt):
  #{treelist-index-of}(tl, v, (_ == _))
def List.index_where: #{treelist-index-where}

fun List.indexes_of(tl :: List, v) :: List.of(NonnegInt):
  #{treelist-indexes-of}(tl, v, (_ == _))
fun List.indexes_where(tl :: List, pred) :: List.of(NonnegInt):
  #{treelist-indexes-where}(tl, pred)

fun List.split(tl :: List, pos :: NonnegInt) :: values(List, List):
  #{treelist-split}(tl, pos)

fun List.takef(tl :: List, proc) :: List:
  #{treelist-takef}(tl, proc)
fun List.dropf(tl :: List, proc) :: List:
  #{treelist-dropf}(tl, proc)
fun List.splitf(tl :: List, proc) :: values(List, List):
  #{treelist-splitf}(tl, proc)

fun List.append_all(tls :: List.of(List)) :: List:
  #{treelist-append*}(tls)

fun List.flatten(v) :: List:
  #{treelist-flatten}(v)

fun List.filter_map(tl :: List, proc) :: List:
  #{treelist-filter-map}(proc, tl)
fun List.count(tl :: List, proc) :: NonnegInt:
  #{treelist-count}(proc, tl)

fun List.partition(tl :: List, pred) :: values(List, List):
  #{treelist-partition}(pred, tl)

fun List.append_map(tl :: List, proc) :: List:
  #{treelist-append-map}(proc, tl)

fun List.argmin(tl :: List, proc):
  #{treelist-argmin}(proc, tl)
fun List.argmax(tl :: List, proc):
  #{treelist-argmax}(proc, tl)

fun List.group_by(tl :: List, proc) :: List.of(List):
  #{treelist-group-by}(proc, tl, (_ == _))

fun List.cartesian_product(tl :: List, ...) :: List.of(List):
  #{treelist-cartesian-product}(tl, ...)
fun List.cartesian_product_all(tls :: List.of(List)) :: List.of(List):
  #{treelist-cartesian-product*}(tls)

